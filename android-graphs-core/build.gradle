
plugins {
    id 'java-library'
}

repositories {
    mavenCentral()
}

dependencies {

    // https://mvnrepository.com/artifact/org.jgrapht/jgrapht
    compile group: 'org.jgrapht', name: 'jgrapht', version: '1.5.1', ext: 'pom'

    // https://mvnrepository.com/artifact/org.jgrapht/jgrapht-core
    compile group: 'org.jgrapht', name: 'jgrapht-core', version: '1.5.1'

    // https://mvnrepository.com/artifact/org.jgrapht/jgrapht-ext
    compile group: 'org.jgrapht', name: 'jgrapht-ext', version: '1.5.1'

    // https://mvnrepository.com/artifact/org.jgrapht/jgrapht-io
    compile group: 'org.jgrapht', name: 'jgrapht-io', version: '1.5.1'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '30.1.1-jre'

    // https://mvnrepository.com/artifact/uk.com.robust-it/cloning
    compile group: 'uk.com.robust-it', name: 'cloning', version: '1.9.12'

    // https://mvnrepository.com/artifact/org.dom4j/dom4j
    compile group: 'org.dom4j', name: 'dom4j', version: '2.1.3'

    // https://mvnrepository.com/artifact/org.apktool/apktool-lib
    compile group: 'org.apktool', name: 'apktool-lib', version: '2.6.1'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    compile group: 'commons-io', name: 'commons-io', version: '2.11.0'

    // https://mvnrepository.com/artifact/org.smali/baksmali
    compile group: 'org.smali', name: 'baksmali', version: '2.5.2'

    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.17.2'

    // https://mvnrepository.com/artifact/org.smali/smali
    testImplementation group: 'org.smali', name: 'smali', version: '2.5.2'
}

task customFatJar(type: Jar) {

    archiveName(rootProject.name + '-lib.jar')

    from {
        (configurations.compile.findAll { !it.path.endsWith(".pom") }).collect {
            it.isDirectory() ? it : zipTree(it) }

        (configurations.runtimeClasspath.findAll { !it.path.endsWith(".pom") }).collect {
            it.isDirectory() ? it : zipTree(it) }
    }

    with jar
}
